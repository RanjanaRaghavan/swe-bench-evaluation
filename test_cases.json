{
  "test_cases": [
    {
      "test_case_id": "pytorch_1",
      "problem_description": "Fix the bug in PyTorch's `_make_tensor` function where it's not properly handling empty tensors with no elements.",
      "base_code": "def _make_tensor(x, device):\n    if isinstance(x, torch.Tensor):\n        if device is not None:\n            x = x.to(device)\n        return x\n    if isinstance(x, (list, tuple)):\n        return torch.tensor(x, device=device)\n    if isinstance(x, np.ndarray):\n        return torch.from_numpy(x).to(device)\n    return x",
      "target_file": "torch/testing/_internal/common_utils.py",
      "target_line": 324,
      "correct_patch": "def _make_tensor(x, device):\n    if isinstance(x, torch.Tensor):\n        if device is not None:\n            x = x.to(device)\n        return x\n    if isinstance(x, (list, tuple)):\n        if len(x) == 0:\n            return torch.tensor([], device=device)\n        return torch.tensor(x, device=device)\n    if isinstance(x, np.ndarray):\n        return torch.from_numpy(x).to(device)\n    return x"
    },
    {
      "test_case_id": "transformers_1",
      "problem_description": "Fix the bug in the Transformers library where the `get_special_tokens_mask` method doesn't properly handle already padded sequences.",
      "base_code": "def get_special_tokens_mask(self, token_ids_0, token_ids_1=None, already_has_special_tokens=False):\n    if already_has_special_tokens:\n        if token_ids_1 is not None:\n            raise ValueError(\n                \"You should not supply a second sequence if the provided sequence of \"\n                \"ids is already formatted with special tokens for the model.\"\n            )\n        return list(map(lambda x: 1 if x in [self.sep_token_id, self.cls_token_id] else 0, token_ids_0))\n\n    if token_ids_1 is None:\n        return [1] + ([0] * len(token_ids_0)) + [1]\n    return [1] + ([0] * len(token_ids_0)) + [1] + ([0] * len(token_ids_1)) + [1]",
      "target_file": "src/transformers/tokenization_utils.py",
      "target_line": 286,
      "correct_patch": "def get_special_tokens_mask(self, token_ids_0, token_ids_1=None, already_has_special_tokens=False):\n    if already_has_special_tokens:\n        if token_ids_1 is not None:\n            raise ValueError(\n                \"You should not supply a second sequence if the provided sequence of \"\n                \"ids is already formatted with special tokens for the model.\"\n            )\n        return list(map(lambda x: 1 if x in [self.sep_token_id, self.cls_token_id, self.pad_token_id] else 0, token_ids_0))\n\n    if token_ids_1 is None:\n        return [1] + ([0] * len(token_ids_0)) + [1]\n    return [1] + ([0] * len(token_ids_0)) + [1] + ([0] * len(token_ids_1)) + [1]"
    },
    {
      "test_case_id": "pandas_1",
      "problem_description": "Fix the bug in pandas where the `to_numpy` method doesn't properly handle datetime64 arrays with mixed timezones.",
      "base_code": "def to_numpy(self):\n    if self.dtype.kind == 'M':\n        return np.asarray(self.asi8)\n    return np.asarray(self)",
      "target_file": "pandas/core/arrays/datetimes.py",
      "target_line": 892,
      "correct_patch": "def to_numpy(self):\n    if self.dtype.kind == 'M':\n        if self._hasna:\n            result = self.asi8.copy()\n            result[self.isna()] = np.datetime64('NaT')\n            return result\n        return self.asi8\n    return np.asarray(self)"
    },
    {
      "test_case_id": "requests_1",
      "problem_description": "Fix the security vulnerability in the requests library where the SSL certificate verification can be bypassed.",
      "base_code": "def merge_environment_settings(url, proxies, stream, verify, cert):\n    env_proxies = get_environ_proxies(url, no_proxy=None)\n    merged_proxies = merge_setting(proxies, env_proxies)\n    merged_verify = merge_setting(verify, os.getenv('REQUESTS_CA_BUNDLE', None))\n    merged_cert = merge_setting(cert, None)\n\n    return merged_proxies, merged_verify, merged_cert",
      "target_file": "requests/utils.py",
      "target_line": 752,
      "correct_patch": "def merge_environment_settings(url, proxies, stream, verify, cert):\n    env_proxies = get_environ_proxies(url, no_proxy=None)\n    merged_proxies = merge_setting(proxies, env_proxies)\n    \n    if verify is None:\n        verify = os.getenv('REQUESTS_CA_BUNDLE', True)\n    merged_verify = merge_setting(verify, os.getenv('CURL_CA_BUNDLE', None))\n    \n    merged_cert = merge_setting(cert, None)\n\n    return merged_proxies, merged_verify, merged_cert"
    },
    {
      "test_case_id": "fastapi_1",
      "problem_description": "Fix the bug in FastAPI's dependency injection where optional dependencies with default values are not properly handled.",
      "base_code": "async def solve_dependencies(\n    *, request: Request, dependant: Dependant, body: Optional[Union[Dict, Any]] = None\n) -> Tuple[Dict, List[ErrorWrapper]]:\n    values: Dict[str, Any] = {}\n    errors: List[ErrorWrapper] = []\n    for dependency in dependant.dependencies:\n        if dependency.cache:\n            dependency_value = await request.app.dependency_cache.get_dependency_value(\n                dependency=dependency,\n                request=request,\n                body=body,\n            )\n        else:\n            dependency_value = await request.app.dependency_overrides.get(\n                dependency.call, dependency.call\n            )(request=request)\n        values[dependency.name] = dependency_value\n    return values, errors",
      "target_file": "fastapi/dependencies/utils.py",
      "target_line": 128,
      "correct_patch": "async def solve_dependencies(\n    *, request: Request, dependant: Dependant, body: Optional[Union[Dict, Any]] = None\n) -> Tuple[Dict, List[ErrorWrapper]]:\n    values: Dict[str, Any] = {}\n    errors: List[ErrorWrapper] = []\n    for dependency in dependant.dependencies:\n        try:\n            if dependency.cache:\n                dependency_value = await request.app.dependency_cache.get_dependency_value(\n                    dependency=dependency,\n                    request=request,\n                    body=body,\n                )\n            else:\n                dependency_call = request.app.dependency_overrides.get(\n                    dependency.call, dependency.call\n                )\n                dependency_value = await dependency_call(request=request)\n            values[dependency.name] = dependency_value\n        except Exception as e:\n            if not dependency.required:\n                values[dependency.name] = dependency.default\n            else:\n                errors.append(ErrorWrapper(e, dependency.name))\n    return values, errors"
    }
  ]
}
